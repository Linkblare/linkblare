generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgres"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String       @id @default(cuid())
    name             String?
    email            String?      @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    posts            Post[]
    role             Roles        @default(USER)
    likedCollections Collection[] @relation("user_collection_likes")
    likedItems       Item[]       @relation("user_item_likes")
    preferredTags    Tag[]
    savedCollection  Collection[] @relation("user_collection_saves")
}

enum Roles {
    ADMIN
    USER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Tag {
    id               Int          @id @default(autoincrement())
    name             String       @unique
    isFlag           Boolean      @default(false)
    color            String?
    items            Item[]
    collections      Collection[]
    preferredByUsers User[]
}

model Collection {
    id          Int          @id @default(autoincrement())
    title       String
    slug        String?
    hash        String?
    description String?
    thumbnail   String?
    tags        Tag[]
    items       Item[]
    parentId    Int?
    parent      Collection?  @relation("parent_children", fields: [parentId], references: [id])
    isFeatured  Boolean?     @default(false)
    itemsImages Json[]       @default([])
    include     String[]     @default([])
    likes       User[]       @relation("user_collection_likes")
    saves       User[]       @relation("user_collection_saves")
    childrens   Collection[] @relation("parent_children")
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt()
}

model Item {
    id           Int        @id @default(autoincrement())
    title        String
    slug         String?
    hash         String?
    description  String?
    thumbnail    String?
    content      Json
    type         String
    tags         Tag[]
    likes        User[]     @relation("user_item_likes")
    Collection   Collection @relation(fields: [collectionId], references: [id])
    collectionId Int
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt()
}
